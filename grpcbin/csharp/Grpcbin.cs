// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpcbin.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Grpcbin {

  /// <summary>Holder for reflection information generated from grpcbin.proto</summary>
  public static partial class GrpcbinReflection {

    #region Descriptor
    /// <summary>File descriptor for grpcbin.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GrpcbinReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1ncnBjYmluLnByb3RvEgdncnBjYmluIrQBCg5IZWFkZXJzTWVzc2FnZRI3",
            "CghNZXRhZGF0YRgBIAMoCzIlLmdycGNiaW4uSGVhZGVyc01lc3NhZ2UuTWV0",
            "YWRhdGFFbnRyeRoYCgZWYWx1ZXMSDgoGdmFsdWVzGAEgAygJGk8KDU1ldGFk",
            "YXRhRW50cnkSCwoDa2V5GAEgASgJEi0KBXZhbHVlGAIgASgLMh4uZ3JwY2Jp",
            "bi5IZWFkZXJzTWVzc2FnZS5WYWx1ZXM6AjgBIjQKFFNwZWNpZmljRXJyb3JS",
            "ZXF1ZXN0EgwKBGNvZGUYASABKA0SDgoGcmVhc29uGAIgASgJIg4KDEVtcHR5",
            "TWVzc2FnZSLTAwoMRHVtbXlNZXNzYWdlEhAKCGZfc3RyaW5nGAEgASgJEhEK",
            "CWZfc3RyaW5ncxgCIAMoCRIPCgdmX2ludDMyGAMgASgFEhAKCGZfaW50MzJz",
            "GAQgAygFEioKBmZfZW51bRgFIAEoDjIaLmdycGNiaW4uRHVtbXlNZXNzYWdl",
            "LkVudW0SKwoHZl9lbnVtcxgGIAMoDjIaLmdycGNiaW4uRHVtbXlNZXNzYWdl",
            "LkVudW0SKAoFZl9zdWIYByABKAsyGS5ncnBjYmluLkR1bW15TWVzc2FnZS5T",
            "dWISKQoGZl9zdWJzGAggAygLMhkuZ3JwY2Jpbi5EdW1teU1lc3NhZ2UuU3Vi",
            "Eg4KBmZfYm9vbBgJIAEoCBIPCgdmX2Jvb2xzGAogAygIEg8KB2ZfaW50NjQY",
            "CyABKAMSEAoIZl9pbnQ2NHMYDCADKAMSDwoHZl9ieXRlcxgNIAEoDBIQCghm",
            "X2J5dGVzcxgOIAMoDBIPCgdmX2Zsb2F0GA8gASgCEhAKCGZfZmxvYXRzGBAg",
            "AygCGhcKA1N1YhIQCghmX3N0cmluZxgBIAEoCSIqCgRFbnVtEgoKBkVOVU1f",
            "MBAAEgoKBkVOVU1fMRABEgoKBkVOVU1fMhACIoEBCgpJbmRleFJlcGx5EhMK",
            "C2Rlc2NyaXB0aW9uGAEgASgJEi8KCWVuZHBvaW50cxgCIAMoCzIcLmdycGNi",
            "aW4uSW5kZXhSZXBseS5FbmRwb2ludBotCghFbmRwb2ludBIMCgRwYXRoGAEg",
            "ASgJEhMKC2Rlc2NyaXB0aW9uGAIgASgJMqgFCgdHUlBDQmluEjUKBUluZGV4",
            "EhUuZ3JwY2Jpbi5FbXB0eU1lc3NhZ2UaEy5ncnBjYmluLkluZGV4UmVwbHki",
            "ABI3CgVFbXB0eRIVLmdycGNiaW4uRW1wdHlNZXNzYWdlGhUuZ3JwY2Jpbi5F",
            "bXB0eU1lc3NhZ2UiABI8CgpEdW1teVVuYXJ5EhUuZ3JwY2Jpbi5EdW1teU1l",
            "c3NhZ2UaFS5ncnBjYmluLkR1bW15TWVzc2FnZSIAEkUKEUR1bW15U2VydmVy",
            "U3RyZWFtEhUuZ3JwY2Jpbi5EdW1teU1lc3NhZ2UaFS5ncnBjYmluLkR1bW15",
            "TWVzc2FnZSIAMAESRQoRRHVtbXlDbGllbnRTdHJlYW0SFS5ncnBjYmluLkR1",
            "bW15TWVzc2FnZRoVLmdycGNiaW4uRHVtbXlNZXNzYWdlIgAoARJUCh5EdW1t",
            "eUJpZGlyZWN0aW9uYWxTdHJlYW1TdHJlYW0SFS5ncnBjYmluLkR1bW15TWVz",
            "c2FnZRoVLmdycGNiaW4uRHVtbXlNZXNzYWdlIgAoATABEkcKDVNwZWNpZmlj",
            "RXJyb3ISHS5ncnBjYmluLlNwZWNpZmljRXJyb3JSZXF1ZXN0GhUuZ3JwY2Jp",
            "bi5FbXB0eU1lc3NhZ2UiABI9CgtSYW5kb21FcnJvchIVLmdycGNiaW4uRW1w",
            "dHlNZXNzYWdlGhUuZ3JwY2Jpbi5FbXB0eU1lc3NhZ2UiABJACgxIZWFkZXJz",
            "VW5hcnkSFS5ncnBjYmluLkVtcHR5TWVzc2FnZRoXLmdycGNiaW4uSGVhZGVy",
            "c01lc3NhZ2UiABJBCg9Ob1Jlc3BvbnNlVW5hcnkSFS5ncnBjYmluLkVtcHR5",
            "TWVzc2FnZRoVLmdycGNiaW4uRW1wdHlNZXNzYWdlIgBiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpcbin.HeadersMessage), global::Grpcbin.HeadersMessage.Parser, new[]{ "Metadata" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Grpcbin.HeadersMessage.Types.Values), global::Grpcbin.HeadersMessage.Types.Values.Parser, new[]{ "Values_" }, null, null, null),
            null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpcbin.SpecificErrorRequest), global::Grpcbin.SpecificErrorRequest.Parser, new[]{ "Code", "Reason" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpcbin.EmptyMessage), global::Grpcbin.EmptyMessage.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpcbin.DummyMessage), global::Grpcbin.DummyMessage.Parser, new[]{ "FString", "FStrings", "FInt32", "FInt32S", "FEnum", "FEnums", "FSub", "FSubs", "FBool", "FBools", "FInt64", "FInt64S", "FBytes", "FBytess", "FFloat", "FFloats" }, null, new[]{ typeof(global::Grpcbin.DummyMessage.Types.Enum) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Grpcbin.DummyMessage.Types.Sub), global::Grpcbin.DummyMessage.Types.Sub.Parser, new[]{ "FString" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grpcbin.IndexReply), global::Grpcbin.IndexReply.Parser, new[]{ "Description", "Endpoints" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Grpcbin.IndexReply.Types.Endpoint), global::Grpcbin.IndexReply.Types.Endpoint.Parser, new[]{ "Path", "Description" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class HeadersMessage : pb::IMessage<HeadersMessage> {
    private static readonly pb::MessageParser<HeadersMessage> _parser = new pb::MessageParser<HeadersMessage>(() => new HeadersMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeadersMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpcbin.GrpcbinReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeadersMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeadersMessage(HeadersMessage other) : this() {
      metadata_ = other.metadata_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeadersMessage Clone() {
      return new HeadersMessage(this);
    }

    /// <summary>Field number for the "Metadata" field.</summary>
    public const int MetadataFieldNumber = 1;
    private static readonly pbc::MapField<string, global::Grpcbin.HeadersMessage.Types.Values>.Codec _map_metadata_codec
        = new pbc::MapField<string, global::Grpcbin.HeadersMessage.Types.Values>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Grpcbin.HeadersMessage.Types.Values.Parser), 10);
    private readonly pbc::MapField<string, global::Grpcbin.HeadersMessage.Types.Values> metadata_ = new pbc::MapField<string, global::Grpcbin.HeadersMessage.Types.Values>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Grpcbin.HeadersMessage.Types.Values> Metadata {
      get { return metadata_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeadersMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeadersMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Metadata.Equals(other.Metadata)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Metadata.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      metadata_.WriteTo(output, _map_metadata_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += metadata_.CalculateSize(_map_metadata_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeadersMessage other) {
      if (other == null) {
        return;
      }
      metadata_.Add(other.metadata_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            metadata_.AddEntriesFrom(input, _map_metadata_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the HeadersMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Values : pb::IMessage<Values> {
        private static readonly pb::MessageParser<Values> _parser = new pb::MessageParser<Values>(() => new Values());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Values> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Grpcbin.HeadersMessage.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Values() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Values(Values other) : this() {
          values_ = other.values_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Values Clone() {
          return new Values(this);
        }

        /// <summary>Field number for the "values" field.</summary>
        public const int Values_FieldNumber = 1;
        private static readonly pb::FieldCodec<string> _repeated_values_codec
            = pb::FieldCodec.ForString(10);
        private readonly pbc::RepeatedField<string> values_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> Values_ {
          get { return values_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Values);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Values other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!values_.Equals(other.values_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= values_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          values_.WriteTo(output, _repeated_values_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += values_.CalculateSize(_repeated_values_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Values other) {
          if (other == null) {
            return;
          }
          values_.Add(other.values_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                values_.AddEntriesFrom(input, _repeated_values_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class SpecificErrorRequest : pb::IMessage<SpecificErrorRequest> {
    private static readonly pb::MessageParser<SpecificErrorRequest> _parser = new pb::MessageParser<SpecificErrorRequest>(() => new SpecificErrorRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpecificErrorRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpcbin.GrpcbinReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpecificErrorRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpecificErrorRequest(SpecificErrorRequest other) : this() {
      code_ = other.code_;
      reason_ = other.reason_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpecificErrorRequest Clone() {
      return new SpecificErrorRequest(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private uint code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 2;
    private string reason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpecificErrorRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpecificErrorRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Reason != other.Reason) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Reason.Length != 0) hash ^= Reason.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Code);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Reason);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Code);
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpecificErrorRequest other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Reason.Length != 0) {
        Reason = other.Reason;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Code = input.ReadUInt32();
            break;
          }
          case 18: {
            Reason = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EmptyMessage : pb::IMessage<EmptyMessage> {
    private static readonly pb::MessageParser<EmptyMessage> _parser = new pb::MessageParser<EmptyMessage>(() => new EmptyMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EmptyMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpcbin.GrpcbinReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmptyMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmptyMessage(EmptyMessage other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmptyMessage Clone() {
      return new EmptyMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EmptyMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EmptyMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EmptyMessage other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class DummyMessage : pb::IMessage<DummyMessage> {
    private static readonly pb::MessageParser<DummyMessage> _parser = new pb::MessageParser<DummyMessage>(() => new DummyMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DummyMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpcbin.GrpcbinReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DummyMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DummyMessage(DummyMessage other) : this() {
      fString_ = other.fString_;
      fStrings_ = other.fStrings_.Clone();
      fInt32_ = other.fInt32_;
      fInt32S_ = other.fInt32S_.Clone();
      fEnum_ = other.fEnum_;
      fEnums_ = other.fEnums_.Clone();
      FSub = other.fSub_ != null ? other.FSub.Clone() : null;
      fSubs_ = other.fSubs_.Clone();
      fBool_ = other.fBool_;
      fBools_ = other.fBools_.Clone();
      fInt64_ = other.fInt64_;
      fInt64S_ = other.fInt64S_.Clone();
      fBytes_ = other.fBytes_;
      fBytess_ = other.fBytess_.Clone();
      fFloat_ = other.fFloat_;
      fFloats_ = other.fFloats_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DummyMessage Clone() {
      return new DummyMessage(this);
    }

    /// <summary>Field number for the "f_string" field.</summary>
    public const int FStringFieldNumber = 1;
    private string fString_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FString {
      get { return fString_; }
      set {
        fString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "f_strings" field.</summary>
    public const int FStringsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_fStrings_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> fStrings_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> FStrings {
      get { return fStrings_; }
    }

    /// <summary>Field number for the "f_int32" field.</summary>
    public const int FInt32FieldNumber = 3;
    private int fInt32_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FInt32 {
      get { return fInt32_; }
      set {
        fInt32_ = value;
      }
    }

    /// <summary>Field number for the "f_int32s" field.</summary>
    public const int FInt32SFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_fInt32S_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> fInt32S_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> FInt32S {
      get { return fInt32S_; }
    }

    /// <summary>Field number for the "f_enum" field.</summary>
    public const int FEnumFieldNumber = 5;
    private global::Grpcbin.DummyMessage.Types.Enum fEnum_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpcbin.DummyMessage.Types.Enum FEnum {
      get { return fEnum_; }
      set {
        fEnum_ = value;
      }
    }

    /// <summary>Field number for the "f_enums" field.</summary>
    public const int FEnumsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Grpcbin.DummyMessage.Types.Enum> _repeated_fEnums_codec
        = pb::FieldCodec.ForEnum(50, x => (int) x, x => (global::Grpcbin.DummyMessage.Types.Enum) x);
    private readonly pbc::RepeatedField<global::Grpcbin.DummyMessage.Types.Enum> fEnums_ = new pbc::RepeatedField<global::Grpcbin.DummyMessage.Types.Enum>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Grpcbin.DummyMessage.Types.Enum> FEnums {
      get { return fEnums_; }
    }

    /// <summary>Field number for the "f_sub" field.</summary>
    public const int FSubFieldNumber = 7;
    private global::Grpcbin.DummyMessage.Types.Sub fSub_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grpcbin.DummyMessage.Types.Sub FSub {
      get { return fSub_; }
      set {
        fSub_ = value;
      }
    }

    /// <summary>Field number for the "f_subs" field.</summary>
    public const int FSubsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Grpcbin.DummyMessage.Types.Sub> _repeated_fSubs_codec
        = pb::FieldCodec.ForMessage(66, global::Grpcbin.DummyMessage.Types.Sub.Parser);
    private readonly pbc::RepeatedField<global::Grpcbin.DummyMessage.Types.Sub> fSubs_ = new pbc::RepeatedField<global::Grpcbin.DummyMessage.Types.Sub>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Grpcbin.DummyMessage.Types.Sub> FSubs {
      get { return fSubs_; }
    }

    /// <summary>Field number for the "f_bool" field.</summary>
    public const int FBoolFieldNumber = 9;
    private bool fBool_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FBool {
      get { return fBool_; }
      set {
        fBool_ = value;
      }
    }

    /// <summary>Field number for the "f_bools" field.</summary>
    public const int FBoolsFieldNumber = 10;
    private static readonly pb::FieldCodec<bool> _repeated_fBools_codec
        = pb::FieldCodec.ForBool(82);
    private readonly pbc::RepeatedField<bool> fBools_ = new pbc::RepeatedField<bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> FBools {
      get { return fBools_; }
    }

    /// <summary>Field number for the "f_int64" field.</summary>
    public const int FInt64FieldNumber = 11;
    private long fInt64_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FInt64 {
      get { return fInt64_; }
      set {
        fInt64_ = value;
      }
    }

    /// <summary>Field number for the "f_int64s" field.</summary>
    public const int FInt64SFieldNumber = 12;
    private static readonly pb::FieldCodec<long> _repeated_fInt64S_codec
        = pb::FieldCodec.ForInt64(98);
    private readonly pbc::RepeatedField<long> fInt64S_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> FInt64S {
      get { return fInt64S_; }
    }

    /// <summary>Field number for the "f_bytes" field.</summary>
    public const int FBytesFieldNumber = 13;
    private pb::ByteString fBytes_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString FBytes {
      get { return fBytes_; }
      set {
        fBytes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "f_bytess" field.</summary>
    public const int FBytessFieldNumber = 14;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_fBytess_codec
        = pb::FieldCodec.ForBytes(114);
    private readonly pbc::RepeatedField<pb::ByteString> fBytess_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> FBytess {
      get { return fBytess_; }
    }

    /// <summary>Field number for the "f_float" field.</summary>
    public const int FFloatFieldNumber = 15;
    private float fFloat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FFloat {
      get { return fFloat_; }
      set {
        fFloat_ = value;
      }
    }

    /// <summary>Field number for the "f_floats" field.</summary>
    public const int FFloatsFieldNumber = 16;
    private static readonly pb::FieldCodec<float> _repeated_fFloats_codec
        = pb::FieldCodec.ForFloat(130);
    private readonly pbc::RepeatedField<float> fFloats_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// TODO: timestamp, duration, oneof, any, maps, fieldmask, wrapper type, struct, listvalue, value, nullvalue, deprecated
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> FFloats {
      get { return fFloats_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DummyMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DummyMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FString != other.FString) return false;
      if(!fStrings_.Equals(other.fStrings_)) return false;
      if (FInt32 != other.FInt32) return false;
      if(!fInt32S_.Equals(other.fInt32S_)) return false;
      if (FEnum != other.FEnum) return false;
      if(!fEnums_.Equals(other.fEnums_)) return false;
      if (!object.Equals(FSub, other.FSub)) return false;
      if(!fSubs_.Equals(other.fSubs_)) return false;
      if (FBool != other.FBool) return false;
      if(!fBools_.Equals(other.fBools_)) return false;
      if (FInt64 != other.FInt64) return false;
      if(!fInt64S_.Equals(other.fInt64S_)) return false;
      if (FBytes != other.FBytes) return false;
      if(!fBytess_.Equals(other.fBytess_)) return false;
      if (FFloat != other.FFloat) return false;
      if(!fFloats_.Equals(other.fFloats_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FString.Length != 0) hash ^= FString.GetHashCode();
      hash ^= fStrings_.GetHashCode();
      if (FInt32 != 0) hash ^= FInt32.GetHashCode();
      hash ^= fInt32S_.GetHashCode();
      if (FEnum != 0) hash ^= FEnum.GetHashCode();
      hash ^= fEnums_.GetHashCode();
      if (fSub_ != null) hash ^= FSub.GetHashCode();
      hash ^= fSubs_.GetHashCode();
      if (FBool != false) hash ^= FBool.GetHashCode();
      hash ^= fBools_.GetHashCode();
      if (FInt64 != 0L) hash ^= FInt64.GetHashCode();
      hash ^= fInt64S_.GetHashCode();
      if (FBytes.Length != 0) hash ^= FBytes.GetHashCode();
      hash ^= fBytess_.GetHashCode();
      if (FFloat != 0F) hash ^= FFloat.GetHashCode();
      hash ^= fFloats_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FString.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FString);
      }
      fStrings_.WriteTo(output, _repeated_fStrings_codec);
      if (FInt32 != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FInt32);
      }
      fInt32S_.WriteTo(output, _repeated_fInt32S_codec);
      if (FEnum != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) FEnum);
      }
      fEnums_.WriteTo(output, _repeated_fEnums_codec);
      if (fSub_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(FSub);
      }
      fSubs_.WriteTo(output, _repeated_fSubs_codec);
      if (FBool != false) {
        output.WriteRawTag(72);
        output.WriteBool(FBool);
      }
      fBools_.WriteTo(output, _repeated_fBools_codec);
      if (FInt64 != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(FInt64);
      }
      fInt64S_.WriteTo(output, _repeated_fInt64S_codec);
      if (FBytes.Length != 0) {
        output.WriteRawTag(106);
        output.WriteBytes(FBytes);
      }
      fBytess_.WriteTo(output, _repeated_fBytess_codec);
      if (FFloat != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(FFloat);
      }
      fFloats_.WriteTo(output, _repeated_fFloats_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FString);
      }
      size += fStrings_.CalculateSize(_repeated_fStrings_codec);
      if (FInt32 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FInt32);
      }
      size += fInt32S_.CalculateSize(_repeated_fInt32S_codec);
      if (FEnum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FEnum);
      }
      size += fEnums_.CalculateSize(_repeated_fEnums_codec);
      if (fSub_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FSub);
      }
      size += fSubs_.CalculateSize(_repeated_fSubs_codec);
      if (FBool != false) {
        size += 1 + 1;
      }
      size += fBools_.CalculateSize(_repeated_fBools_codec);
      if (FInt64 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FInt64);
      }
      size += fInt64S_.CalculateSize(_repeated_fInt64S_codec);
      if (FBytes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(FBytes);
      }
      size += fBytess_.CalculateSize(_repeated_fBytess_codec);
      if (FFloat != 0F) {
        size += 1 + 4;
      }
      size += fFloats_.CalculateSize(_repeated_fFloats_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DummyMessage other) {
      if (other == null) {
        return;
      }
      if (other.FString.Length != 0) {
        FString = other.FString;
      }
      fStrings_.Add(other.fStrings_);
      if (other.FInt32 != 0) {
        FInt32 = other.FInt32;
      }
      fInt32S_.Add(other.fInt32S_);
      if (other.FEnum != 0) {
        FEnum = other.FEnum;
      }
      fEnums_.Add(other.fEnums_);
      if (other.fSub_ != null) {
        if (fSub_ == null) {
          fSub_ = new global::Grpcbin.DummyMessage.Types.Sub();
        }
        FSub.MergeFrom(other.FSub);
      }
      fSubs_.Add(other.fSubs_);
      if (other.FBool != false) {
        FBool = other.FBool;
      }
      fBools_.Add(other.fBools_);
      if (other.FInt64 != 0L) {
        FInt64 = other.FInt64;
      }
      fInt64S_.Add(other.fInt64S_);
      if (other.FBytes.Length != 0) {
        FBytes = other.FBytes;
      }
      fBytess_.Add(other.fBytess_);
      if (other.FFloat != 0F) {
        FFloat = other.FFloat;
      }
      fFloats_.Add(other.fFloats_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            FString = input.ReadString();
            break;
          }
          case 18: {
            fStrings_.AddEntriesFrom(input, _repeated_fStrings_codec);
            break;
          }
          case 24: {
            FInt32 = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            fInt32S_.AddEntriesFrom(input, _repeated_fInt32S_codec);
            break;
          }
          case 40: {
            fEnum_ = (global::Grpcbin.DummyMessage.Types.Enum) input.ReadEnum();
            break;
          }
          case 50:
          case 48: {
            fEnums_.AddEntriesFrom(input, _repeated_fEnums_codec);
            break;
          }
          case 58: {
            if (fSub_ == null) {
              fSub_ = new global::Grpcbin.DummyMessage.Types.Sub();
            }
            input.ReadMessage(fSub_);
            break;
          }
          case 66: {
            fSubs_.AddEntriesFrom(input, _repeated_fSubs_codec);
            break;
          }
          case 72: {
            FBool = input.ReadBool();
            break;
          }
          case 82:
          case 80: {
            fBools_.AddEntriesFrom(input, _repeated_fBools_codec);
            break;
          }
          case 88: {
            FInt64 = input.ReadInt64();
            break;
          }
          case 98:
          case 96: {
            fInt64S_.AddEntriesFrom(input, _repeated_fInt64S_codec);
            break;
          }
          case 106: {
            FBytes = input.ReadBytes();
            break;
          }
          case 114: {
            fBytess_.AddEntriesFrom(input, _repeated_fBytess_codec);
            break;
          }
          case 125: {
            FFloat = input.ReadFloat();
            break;
          }
          case 130:
          case 133: {
            fFloats_.AddEntriesFrom(input, _repeated_fFloats_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DummyMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Enum {
        [pbr::OriginalName("ENUM_0")] _0 = 0,
        [pbr::OriginalName("ENUM_1")] _1 = 1,
        [pbr::OriginalName("ENUM_2")] _2 = 2,
      }

      public sealed partial class Sub : pb::IMessage<Sub> {
        private static readonly pb::MessageParser<Sub> _parser = new pb::MessageParser<Sub>(() => new Sub());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Sub> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Grpcbin.DummyMessage.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Sub() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Sub(Sub other) : this() {
          fString_ = other.fString_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Sub Clone() {
          return new Sub(this);
        }

        /// <summary>Field number for the "f_string" field.</summary>
        public const int FStringFieldNumber = 1;
        private string fString_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FString {
          get { return fString_; }
          set {
            fString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Sub);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Sub other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (FString != other.FString) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (FString.Length != 0) hash ^= FString.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (FString.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(FString);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (FString.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FString);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Sub other) {
          if (other == null) {
            return;
          }
          if (other.FString.Length != 0) {
            FString = other.FString;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                FString = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class IndexReply : pb::IMessage<IndexReply> {
    private static readonly pb::MessageParser<IndexReply> _parser = new pb::MessageParser<IndexReply>(() => new IndexReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IndexReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grpcbin.GrpcbinReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IndexReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IndexReply(IndexReply other) : this() {
      description_ = other.description_;
      endpoints_ = other.endpoints_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IndexReply Clone() {
      return new IndexReply(this);
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 1;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "endpoints" field.</summary>
    public const int EndpointsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Grpcbin.IndexReply.Types.Endpoint> _repeated_endpoints_codec
        = pb::FieldCodec.ForMessage(18, global::Grpcbin.IndexReply.Types.Endpoint.Parser);
    private readonly pbc::RepeatedField<global::Grpcbin.IndexReply.Types.Endpoint> endpoints_ = new pbc::RepeatedField<global::Grpcbin.IndexReply.Types.Endpoint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Grpcbin.IndexReply.Types.Endpoint> Endpoints {
      get { return endpoints_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IndexReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IndexReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Description != other.Description) return false;
      if(!endpoints_.Equals(other.endpoints_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= endpoints_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Description.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Description);
      }
      endpoints_.WriteTo(output, _repeated_endpoints_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += endpoints_.CalculateSize(_repeated_endpoints_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IndexReply other) {
      if (other == null) {
        return;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      endpoints_.Add(other.endpoints_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Description = input.ReadString();
            break;
          }
          case 18: {
            endpoints_.AddEntriesFrom(input, _repeated_endpoints_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the IndexReply message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Endpoint : pb::IMessage<Endpoint> {
        private static readonly pb::MessageParser<Endpoint> _parser = new pb::MessageParser<Endpoint>(() => new Endpoint());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Endpoint> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Grpcbin.IndexReply.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Endpoint() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Endpoint(Endpoint other) : this() {
          path_ = other.path_;
          description_ = other.description_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Endpoint Clone() {
          return new Endpoint(this);
        }

        /// <summary>Field number for the "path" field.</summary>
        public const int PathFieldNumber = 1;
        private string path_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Path {
          get { return path_; }
          set {
            path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "description" field.</summary>
        public const int DescriptionFieldNumber = 2;
        private string description_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Description {
          get { return description_; }
          set {
            description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Endpoint);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Endpoint other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Path != other.Path) return false;
          if (Description != other.Description) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Path.Length != 0) hash ^= Path.GetHashCode();
          if (Description.Length != 0) hash ^= Description.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Path.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Path);
          }
          if (Description.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Description);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Path.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
          }
          if (Description.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Endpoint other) {
          if (other == null) {
            return;
          }
          if (other.Path.Length != 0) {
            Path = other.Path;
          }
          if (other.Description.Length != 0) {
            Description = other.Description;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Path = input.ReadString();
                break;
              }
              case 18: {
                Description = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
