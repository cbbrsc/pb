// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: addsvc.proto
// Original file comments:
// based on https://github.com/go-kit/kit/blob/master/examples/addsvc/pb/addsvc.proto
//
#pragma warning disable 1591
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace Addsvc {
  /// <summary>
  /// The Add service definition.
  /// </summary>
  public static partial class Add
  {
    static readonly string __ServiceName = "addsvc.Add";

    static readonly grpc::Marshaller<global::Addsvc.SumRequest> __Marshaller_SumRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Addsvc.SumRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Addsvc.SumReply> __Marshaller_SumReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Addsvc.SumReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Addsvc.ConcatRequest> __Marshaller_ConcatRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Addsvc.ConcatRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Addsvc.ConcatReply> __Marshaller_ConcatReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Addsvc.ConcatReply.Parser.ParseFrom);

    static readonly grpc::Method<global::Addsvc.SumRequest, global::Addsvc.SumReply> __Method_Sum = new grpc::Method<global::Addsvc.SumRequest, global::Addsvc.SumReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Sum",
        __Marshaller_SumRequest,
        __Marshaller_SumReply);

    static readonly grpc::Method<global::Addsvc.ConcatRequest, global::Addsvc.ConcatReply> __Method_Concat = new grpc::Method<global::Addsvc.ConcatRequest, global::Addsvc.ConcatReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Concat",
        __Marshaller_ConcatRequest,
        __Marshaller_ConcatReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Addsvc.AddsvcReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Add</summary>
    public abstract partial class AddBase
    {
      /// <summary>
      /// Sums two integers.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Addsvc.SumReply> Sum(global::Addsvc.SumRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Concatenates two strings
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Addsvc.ConcatReply> Concat(global::Addsvc.ConcatRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Add</summary>
    public partial class AddClient : grpc::ClientBase<AddClient>
    {
      /// <summary>Creates a new client for Add</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public AddClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Add that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public AddClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected AddClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected AddClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Sums two integers.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Addsvc.SumReply Sum(global::Addsvc.SumRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Sum(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sums two integers.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Addsvc.SumReply Sum(global::Addsvc.SumRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Sum, null, options, request);
      }
      /// <summary>
      /// Sums two integers.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Addsvc.SumReply> SumAsync(global::Addsvc.SumRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SumAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sums two integers.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Addsvc.SumReply> SumAsync(global::Addsvc.SumRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Sum, null, options, request);
      }
      /// <summary>
      /// Concatenates two strings
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Addsvc.ConcatReply Concat(global::Addsvc.ConcatRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Concat(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Concatenates two strings
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Addsvc.ConcatReply Concat(global::Addsvc.ConcatRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Concat, null, options, request);
      }
      /// <summary>
      /// Concatenates two strings
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Addsvc.ConcatReply> ConcatAsync(global::Addsvc.ConcatRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ConcatAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Concatenates two strings
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Addsvc.ConcatReply> ConcatAsync(global::Addsvc.ConcatRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Concat, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override AddClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new AddClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(AddBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Sum, serviceImpl.Sum)
          .AddMethod(__Method_Concat, serviceImpl.Concat).Build();
    }

  }
}
#endregion
